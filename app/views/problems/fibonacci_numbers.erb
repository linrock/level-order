<section class="problem">
  <h1>Fibonacci numbers</h1>

  <%= explanation do %>
    A Fibonacci number is the sum of the two previous numbers
    in the sequence. Write a function that finds the n-th Fibonacci
    number.

    These are the first 10 fibonacci numbers:  1 1 2 3 5 8 13 21 34 55
  <% end %>

  <%= code_inline do %>
    Input:   5
    Output:  5

    Input:   12
    Output:  144

    Input:   200
    Output:  280571172992510140037611932413038677189525
  <% end %>

  <h2>Solutions</h2>
  <%= explanation do %>
    The number of bits needed to represent the n-th fibonacci number scales
    linearly with n, so we need to consider an extra O(n) factor when considering
    time/space complexities.

    For reference:

    * The 10th fibonacci number has 6 bits
    * The 100th fibonacci number has 68 bits
    * The 1,000th fibonacci number has 693 bits
    * The 10,000th fibonacci number has 6,941 bits

  <% end %>
</section>

<%= solutions_table([:bad, :average, :average, :good, :great, :great]) do %>
  Recursion            O(2^n n^2)                      O(n^2)
  Memoization          O(n^2)                          O(n^2)
  Dynamic programming  O(n^2)                          O(n^2)
  Iterative            O(n^2)                          O(n)
  Binet's formula      O(n log n log log n) to O(n^2)  O(n)
  Fast doubling        O(n log n log log n) to O(n^2)  O(n)
<% end %>

<section class="solutions">
  <section class="solution">
    <h2 class="bad">Solution 1: Recursion</h2>

    <div class="explanation">
    </div>
    <%= rb_code "code/problems/fibonacci_numbers/s1.rb" %>
    <%= complexity_table do %>
      Time   O(2^n n^2)  2 recursive calls adding O(n)-bit numbers at n levels
      Space  O(n^2)      O(n) max stack depth with O(n) bits for the nth number
    <% end %>
  </section>

  <section class="solution">
    <h2 class="average">Solution 2: Memoization</h2>

    <div class="explanation">
    </div>
    <%= rb_code "code/problems/fibonacci_numbers/s2.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)   O(n) stack depth adding O(n) bit numbers
      Space  O(n^2)   n-sized array of numbers with O(n) bits per number
    <% end %>
  </section>

  <section class="solution">
    <h2 class="average">Solution 3: Dynamic programming</h2>

    <div class="explanation">
    </div>
    <%= rb_code "code/problems/fibonacci_numbers/s3.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)   O(n) loop adding O(n)-bit numbers at each iteration
      Space  O(n^2)   n-sized array of numbers with O(n) bits per number
    <% end %>
  </section>

  <section class="solution">
    <h2 class="good">Solution 4: Iterative</h2>

    <div class="explanation">
    </div>
    <%= rb_code "code/problems/fibonacci_numbers/s4.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)   O(n) loop adding O(n) bit numbers at each iteration
      Space  O(n)     Two integers each containing O(n) bits
    <% end %>
  </section>

  <section class="solution">
    <h2 class="great">Solution 5: Binet's formula</h2>

    <%= explanation do %>
      Calculating a fibonacci number with this formula uses log(n)
      multiplications when using
      [exponentiation by squaring](https://en.wikipedia.org/wiki/Exponentiation_by_squaring#Computational_complexity),
      which results in a time complexity bounded by the runtime of
      the multiplication algorithm being used:

      <table>
        <tr>
          <th>Runtime</th>
          <th>Algorithm</th>
        </tr>
        <tr>
          <td>O(n^2)</td>
          <td>Regular long multiplication</td>
        </tr>
        <tr>
          <td>O(n^1.585)</td>
          <td>Karatsuba algorithm</td>
        </tr>
        <tr>
          <td>O(n^1.465)</td>
          <td>3-way Toom-Cook multiplication</td>
        </tr>
        <tr>
          <td>O(n log n log log n)</td>
          <td>Schonhage-Strassen algorithm</td>
        <tr/>
      </table>

      In the worst case, multiplication is done the way we learned in school -
      multiplying each digit together and summing them up. The runtime is O(n^2),
      but in practice this algorithm is slower than the O(n^2) addition algorithms
      because of performance penalties in floating-point arithmetic vs adding
      integers.

      The best case happens with the Schonhage-Strassen algorithm, which starts to
      outperform the other algorithms at astronomically large values of n
      (tens-of-thousands of digits).

      The floating point precision of standard libraries in most programming languages
      are not enough to handle the precision needed for large numbers of n. You'll need
      to use a library designed to handle unlimited precision like the
      <a href="https://gmplib.org/">GNU multiple precision arithmetic library</a>
      if you want accurate calculations as n increases in size.
    <% end %>
    <%= rb_code "code/problems/fibonacci_numbers/s5.rb" %>
    <%= complexity_table do %>
      Time   O(n log n log log n) to O(n^2)  Varies depending on the multiplication algorithm used
      Space  O(n)                            Floating point numbers each of size O(n)
    <% end %>
  </section>

  <section class="solution">
    <h2 class="great">Solution 6: Fast doubling</h2>
    <%= explanation do %>
      Same runtime as Binet's formula above, but operating only on integers, so
      there's no need for an arbitrary floating point precision library.
    <% end %>

    <%= rb_code "code/problems/fibonacci_numbers/s6.rb" %>
    <%= complexity_table do %>
      Time   O(n log n log log n) to O(n^2)  Varies depending on the multiplication algorithm used
      Space  O(n)                            Integers of size O(n)
    <% end %>
  </section>
</section>

<%= resources_section do %>
  Wikipedia - Fibonacci numbers
  https://en.wikipedia.org/wiki/Fibonacci_number

  Wikipedia - computational complexity of math operations
  https://en.wikipedia.org/wiki/Computational_complexity_of_mathematical_operations

  Computing fibonacci numbers using Binet's formula
  https://bosker.wordpress.com/2011/07/27/computing-fibonacci-numbers-using-binet%E2%80%99s-formula/

  Fast fibonacci algorithms
  https://www.nayuki.io/page/fast-fibonacci-algorithms
<% end %>
