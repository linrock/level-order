<h1>Longest increasing subsequence</h1>

<article class="problem-part">
<div>
  Part 1. Find the length of the longest increasing subsequence
</div>
<%= solutions_table do %>
  Brute force          O(2^n)      O(1)
  Dynamic programming  O(n^2)      O(n)
  Patience sorting     O(n log n)  O(n)
<% end %>

<section class="solutions">
  <h2>Solution 1: Brute force</h2>
  <div class="explanation">
    For each possible subsequence, check if it's an increasing subsequence.
    If it is, save its length if it's longer than the previous longest subsequence.
    When generating a subsequence, consider that every element in the original
    sequence can either be in the sequence or not in the sequence.
  </div>
  <%= rb_code "code/problems/longest_increasing_subsequence/s1.rb" %>
  <%= complexity_table do %>
    Time   O(2^n)
    Space  O(1)
  <% end %>

  <h2>Solution 2: Dynamic programming</h2>
  <div class="explanation">
    Iterate over all elements of the array.
  </div>
  <%= complexity_table do %>
    Time   O(n^2)
    Space  O(n)
  <% end %>

  <h2>Solution 3: Patience sorting</h2>
  <div class="explanation">
    Named after a card game.
  </div>
  <%= complexity_table do %>
    Time   O(n log n)
    Space  O(n)
  <% end %>
</section>

<section class="resources">

</section>
</article>

<article class="problem-part">
  <div>
    Part 2. Find one of the longest increasing subsequences
  </div>
  <%= solutions_table do %>
    Brute force          O(2^n)      O(n)
    Dynamic programming  O(n^2)      O(n)
    Patience sorting     O(n log n)  O(n)
  <% end %>
<article>
