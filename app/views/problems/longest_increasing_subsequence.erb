<h1>Longest increasing subsequence</h1>

<div>
  Part 1. Find the length of the longest increasing subsequence
</div>

<section class="solutions">
  <h2>Solution 1: Brute force</h2>
  <div class="explanation">
    For each possible subsequence, check if it's the longest.
  </div>
  <table class="complexity">
    <tr><td>Time</td><td>O(2<sup>n</sup>)</td></tr>
    <tr><td>Space</td><td>O(1)</td></tr>
  </table>

  <h2>Solution 2: Dynamic programming</h2>
  <table class="complexity">
    <tr><td>Time</td><td>O(n<sup>2</sup>)</td></tr>
    <tr><td>Space</td><td>O(n)</td></tr>
  </table>

  <h2>Solution 3: Patience sorting</h2>
  <table class="complexity">
    <tr><td>Time</td><td>O(n log n)</td></tr>
    <tr><td>Space</td><td>O(n)</td></tr>
  </table>
</section>

<section class="resources">

</section>

<div>
  Part 2. Find one of the longest increasing subsequences
</div>
