<section class="problem">
  <h1>Maximum subarray sum</h1>

  <%= explanation do %>
    Given an array of numbers, return the maximum sum of
    any continous subarray of numbers.
  <% end %>
</section>

<%= solutions_table([:bad, :average, :good, :great]) do %>
  Brute force          O(n^2)      O(1)
  Divide and conquer   O(n log n)  O(n)
  Dynamic programming  O(n)        O(n)
  Kadane's algorithm   O(n)        O(1)
<% end %>

<section class="solutions">
  <section class="solution">
    <h2 class="bad">Solution 1: Brute force</h2>
    <%= explanation do %>
      To find the maximum subarray sum:

      * Use two loops to iterate over all O(n^2) possible subarrays
      * The outer loop decides where the subarray starts
      * The inner loop decides where the subarray ends
      * After each inner loop ends, you have the sum of the current subarray
      * This sum is the new max sum if it's higher than the current max sum

      The max sum after checking all subarrays is the maximum subarray sum
    <% end %>

    <%= rb_code "code/problems/maximum_subarray_sum/s1.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)  Checking all O(n^2) possible subarrays
      Space  O(1)    The sum and max sum
    <% end %>
  </section>

  <section class="solution">
    <h2 class="average">Solution 2: Divide and conquer</h2>
    <%= solution_explanation do %>
      The maximum subarray sum can exist in 1 of 3 places:

        * The left half of the array
        * The right half of the array
        * Crossing into both halves of the array

      The divide and conquer approach recursively checks smaller
      subarrays and returns the highest sum found.
    <% end %>
    <%= rb_code "code/problems/maximum_subarray_sum/s2.rb" %>
    <%= complexity_table do %>
      Time   O(n log n)   Stack depth of O(log n) each checking O(n) values
      Space  O(log n)     Max stack depth of O(log n)
    <% end %>
  </section>

  <section class="solution">
    <h2 class="good">Solution 3: Dynamic programming</h2>
    <div class="explanation">
      Each value in the max_sums array is the maximum possible
      subarray sum in a subarray that includes numbers[i]
     </div>
    <%= rb_code "code/problems/maximum_subarray_sum/s3.rb" %>
    <%= complexity_table do %>
      Time   O(n)  Loop through all values in the input array once
      Space  O(n)  Space for an n-length array
    <% end %>
  </section>

  <section class="solution">
    <h2 class="great">Solution 4: Kadane's algorithm</h2>
    <div class="explanation">
      This is effectively the dynamic programming approach above
      without needing space for an additional array. Since we only
      need to look at the previous value in the max sums array to
      determine the current value, we can use a single variable to
      track that value instead of an entire array.
    </div>
    <%= rb_code "code/problems/maximum_subarray_sum/s4.rb" %>
    <%= complexity_table do %>
      Time   O(n)  Loop through all values in the input array once
      Space  O(1)  The sum and max sum
    <% end %>
  </section>
</section>

<%= resources_section do %>
  Leetcode problem
  https://leetcode.com/problems/maximum-subarray

  Wikipedia - Kadane's algorithm
  https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm
<% end %>
