<section class="problem">
  <h1>Longest palindromic substring</h1>

  <%= explanation do %>
    Given a string, find the longest substring that's also a
    palindrome. A palindrome is a string that reads the same,
    forwards and backwards.
  <% end %>

  <%= code_inline do %>
    Input:   abc
    Output:  a

    Input:   bananas
    Output:  anana
  <% end %>
</section>

<%= solutions_table do %>
  Brute force            O(n^3)   O(1)
  Dynamic programming    O(n^2)   O(n^2)
  Central expansion      O(n^2)   O(1)
  Manacher's algorithm   O(n)     O(1)
<% end %>

<section class="solutions">
  <div class="solution">
    <h2>Solution 1: Brute force</h2>

    <%= solution_explanation do %>
      Use two loops to iterate over all possible substrings:

        * The outer loop provides the start index of a substring
        * The inner loop provides the end index of a substring

      For each substring, check if it's a palindrome.

        * If it's a palindrome
          * See if it's longer than the longest palindrome we've seen so far
          * If it is, save the start and end indices of the substring
        * If it isn't, move on to the next substring

      Afterwards, we'll have the start and end indices of the longest palindrome.
    <% end %>

    <%= rb_code "code/problems/longest_palindromic_substring/s1.rb" %>
    <%= complexity_table do %>
      Time   O(n^3)  Each of O(n^2) substrings takes O(n) time to check
      Space  O(1)    The start/end indices of the longest palindrome
    <% end %>
  </div>

  <div class="solution">
    <h2>Solution 2: Dynamic programming</h2>

    <%= solution_explanation do %>
      This improves the runtime of the brute force solution by checking
      whether a substring is a palindrome in O(1) time instead of O(n) time.

      It saves time at the expense of space by storing whether a substring
      is a palindrome in a 2D array, and referencing these values for each
      longer substring.

      Let each value of is_pal[i][j] be

        * true - when a substring s[i .. j] is a palindrome
        * false - otherwise

      We can check if a substring s[i .. j] is a palindrome in O(1) time:

        * it's a palindrome if s[i] == s[j] and is_pal[i+1][j-1] is true
        * otherwise it's not a palindrome
    <% end %>

    <%= rb_code "code/problems/longest_palindromic_substring/s2.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)  Each of O(n^2) substrings takes O(1) time to check
      Space  O(n^2)  2D array of booleans for O(n^2) substrings
    <% end %>
  </div>

  <div class="solution">
    <h2>Solution 3: Central expansion</h2>

    <%= solution_explanation do %>
      This improves on the previous two solutions by iterating
      over all possible centers of palindromes (2n - 1) ~ O(n) instead of
      iterating over all possible substrings.

      A center can be represented by a pair of string indices [i, j]

      The center of a palindrome can begin either

        * on a character for odd-length palindromes - [i, i]
        * between two characters for even-length palindromes - [i, i + 1]

      For each center [i, j], check if the first and last letter match.

        * If the letters match
          * expand the edges outwards to look for a longer palindrome
          * store the start/end indices if it's the longest palindrome seen so far
        * Otherwise move on to the next center

      Afterwards, we'll have the start and end indices of the longest palindrome.
    <% end %>

    <%= rb_code "code/problems/longest_palindromic_substring/s3.rb" %>
    <%= complexity_table do %>
      Time   O(n^2)  Each of 2n - 1 centers takes O(n) time to check
      Space  O(1)    The start/ end indices of the longest palindrome
    <% end %>
  </div>

  <div class="solution">
    <h2>Solution 4: Manacher's algorithm</h2>

    <%= solution_explanation do %>
      This improves over the central expansion algorithm by skipping
      ahead in the string after finding a palindrome by recognizing that.

        * the left side of a palindrome is a mirror image of the right side
    <% end %>

    <%= complexity_table do %>
      Time   O(n)
      Space  O(1)
    <% end %>
  </div>
</section>

<%= resources_section do %>
  Leetcode problem
  https://leetcode.com/problems/longest-palindromic-substring/
<% end %>
